// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	digilocker "bitbucket.org/junglee_games/getsetgo/sdks/digilocker"

	mock "github.com/stretchr/testify/mock"
)

// Digilocker is an autogenerated mock type for the Digilocker type
type Digilocker struct {
	mock.Mock
}

// CheckAccountstatus provides a mock function with given fields: mobile, aadhaar
func (_m *Digilocker) CheckAccountstatus(mobile string, aadhaar string) (*digilocker.AccountStatusDetails, error) {
	ret := _m.Called(mobile, aadhaar)

	var r0 *digilocker.AccountStatusDetails
	if rf, ok := ret.Get(0).(func(string, string) *digilocker.AccountStatusDetails); ok {
		r0 = rf(mobile, aadhaar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*digilocker.AccountStatusDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(mobile, aadhaar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddharDetails provides a mock function with given fields: transactionId, referenceId
func (_m *Digilocker) GetAddharDetails(transactionId string, referenceId string) (*digilocker.AadhaarDetails, error) {
	ret := _m.Called(transactionId, referenceId)

	var r0 *digilocker.AadhaarDetails
	if rf, ok := ret.Get(0).(func(string, string) *digilocker.AadhaarDetails); ok {
		r0 = rf(transactionId, referenceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*digilocker.AadhaarDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(transactionId, referenceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Healthcheck provides a mock function with given fields:
func (_m *Digilocker) Healthcheck() (*digilocker.HealthcheckResult, error) {
	ret := _m.Called()

	var r0 *digilocker.HealthcheckResult
	if rf, ok := ret.Get(0).(func() *digilocker.HealthcheckResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*digilocker.HealthcheckResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartKYC provides a mock function with given fields: transactionId, referenceId, redirectURL
func (_m *Digilocker) StartKYC(transactionId string, referenceId string, redirectURL string) (*digilocker.KYCStartDetails, error) {
	ret := _m.Called(transactionId, referenceId, redirectURL)

	var r0 *digilocker.KYCStartDetails
	if rf, ok := ret.Get(0).(func(string, string, string) *digilocker.KYCStartDetails); ok {
		r0 = rf(transactionId, referenceId, redirectURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*digilocker.KYCStartDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(transactionId, referenceId, redirectURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// addHeaders provides a mock function with given fields: req
func (_m *Digilocker) addHeaders(req *http.Request) {
	_m.Called(req)
}

type mockConstructorTestingTNewDigilocker interface {
	mock.TestingT
	Cleanup(func())
}

// NewDigilocker creates a new instance of Digilocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDigilocker(t mockConstructorTestingTNewDigilocker) *Digilocker {
	mock := &Digilocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
